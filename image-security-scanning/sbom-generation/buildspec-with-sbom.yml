version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: us-east-1
    AWS_ACCOUNT_ID: "123456789012"
    IMAGE_REPO_NAME: "secure-app"
    IMAGE_TAG: "latest"
    SBOM_FORMAT: "spdx-json"
    SBOM_S3_BUCKET: "my-sbom-bucket"
  parameter-store:
    VULNERABILITY_THRESHOLD_CRITICAL: "/container-security/vulnerability-thresholds/critical"
    VULNERABILITY_THRESHOLD_HIGH: "/container-security/vulnerability-thresholds/high"

phases:
  install:
    runtime-versions:
      docker: 20
    commands:
      - echo Installing syft for SBOM generation...
      - curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
      - syft version
      - echo Installing cosign for image signing...
      - curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
      - mv cosign-linux-amd64 /usr/local/bin/cosign
      - chmod +x /usr/local/bin/cosign
      - cosign version

  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo Setting vulnerability thresholds - Critical:$VULNERABILITY_THRESHOLD_CRITICAL High:$VULNERABILITY_THRESHOLD_HIGH

  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:latest
      - echo Generating SBOM for the built image...
      - mkdir -p sbom-reports
      - |
        # Generate SBOM using syft
        SBOM_FILE="sbom-reports/sbom-${IMAGE_REPO_NAME}-${IMAGE_TAG}-$(date +%Y%m%d-%H%M%S).spdx.json"
        syft $IMAGE_REPO_NAME:$IMAGE_TAG -o spdx-json=$SBOM_FILE
        
        # Generate SBOM summary
        PACKAGE_COUNT=$(jq '.packages | length' $SBOM_FILE)
        echo "SBOM generated with $PACKAGE_COUNT packages"
        
        # Create SBOM attestation
        SBOM_ATTESTATION="sbom-reports/sbom-attestation-${IMAGE_REPO_NAME}-${IMAGE_TAG}.json"
        cat > $SBOM_ATTESTATION << EOF
        {
          "image": "$REPOSITORY_URI:$IMAGE_TAG",
          "sbom_file": "$SBOM_FILE",
          "package_count": $PACKAGE_COUNT,
          "generated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "build_id": "$CODEBUILD_BUILD_ID",
          "commit_hash": "$COMMIT_HASH",
          "generator": "syft",
          "format": "spdx-json"
        }
        EOF
        
        echo "SBOM_FILE=$SBOM_FILE" >> $CODEBUILD_SRC_DIR/build-artifacts.env
        echo "SBOM_ATTESTATION=$SBOM_ATTESTATION" >> $CODEBUILD_SRC_DIR/build-artifacts.env

  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - |
        # Upload SBOM to S3
        if [ -n "$SBOM_S3_BUCKET" ]; then
          echo "Uploading SBOM to S3..."
          aws s3 cp sbom-reports/ s3://$SBOM_S3_BUCKET/sbom-reports/ --recursive
          echo "SBOM uploaded to s3://$SBOM_S3_BUCKET/sbom-reports/"
        fi
      - |
        # Sign image with cosign (if signing key is available)
        if [ -n "$COSIGN_PRIVATE_KEY" ]; then
          echo "Signing image with cosign..."
          echo "$COSIGN_PRIVATE_KEY" | base64 -d > cosign.key
          COSIGN_PASSWORD="" cosign sign --key cosign.key $REPOSITORY_URI:$IMAGE_TAG
          rm cosign.key
          echo "Image signed successfully"
        else
          echo "No signing key provided, skipping image signing"
        fi
      - echo Waiting for Inspector scan to complete...
      - |
        # Wait for Inspector scan results
        SCAN_STATUS="IN_PROGRESS"
        TIMEOUT=300
        ELAPSED=0
        
        while [ "$SCAN_STATUS" = "IN_PROGRESS" ] && [ $ELAPSED -lt $TIMEOUT ]; do
          sleep 30
          ELAPSED=$((ELAPSED + 30))
          SCAN_RESULT=$(aws ecr describe-image-scan-findings --repository-name $IMAGE_REPO_NAME --image-id imageTag=$IMAGE_TAG --region $AWS_DEFAULT_REGION 2>/dev/null || echo "SCAN_NOT_FOUND")
          
          if [ "$SCAN_RESULT" != "SCAN_NOT_FOUND" ]; then
            SCAN_STATUS=$(echo $SCAN_RESULT | jq -r '.imageScanStatus.status')
            echo "Scan status: $SCAN_STATUS (${ELAPSED}s elapsed)"
          else
            echo "Scan not yet available (${ELAPSED}s elapsed)"
          fi
        done
      - |
        # Check vulnerability thresholds
        if [ "$SCAN_STATUS" = "COMPLETE" ]; then
          CRITICAL_COUNT=$(echo $SCAN_RESULT | jq -r '.imageScanFindings.findingCounts.CRITICAL // 0')
          HIGH_COUNT=$(echo $SCAN_RESULT | jq -r '.imageScanFindings.findingCounts.HIGH // 0')
          MEDIUM_COUNT=$(echo $SCAN_RESULT | jq -r '.imageScanFindings.findingCounts.MEDIUM // 0')
          LOW_COUNT=$(echo $SCAN_RESULT | jq -r '.imageScanFindings.findingCounts.LOW // 0')
          
          echo "Vulnerability Summary:"
          echo "  Critical: $CRITICAL_COUNT"
          echo "  High: $HIGH_COUNT"
          echo "  Medium: $MEDIUM_COUNT"
          echo "  Low: $LOW_COUNT"
          
          # Create vulnerability attestation
          VULN_ATTESTATION="sbom-reports/vulnerability-attestation-${IMAGE_REPO_NAME}-${IMAGE_TAG}.json"
          cat > $VULN_ATTESTATION << EOF
          {
            "image": "$REPOSITORY_URI:$IMAGE_TAG",
            "scan_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "vulnerability_counts": {
              "critical": $CRITICAL_COUNT,
              "high": $HIGH_COUNT,
              "medium": $MEDIUM_COUNT,
              "low": $LOW_COUNT
            },
            "thresholds": {
              "critical": ${VULNERABILITY_THRESHOLD_CRITICAL:-0},
              "high": ${VULNERABILITY_THRESHOLD_HIGH:-5}
            },
            "scan_status": "$SCAN_STATUS",
            "build_id": "$CODEBUILD_BUILD_ID"
          }
          EOF
          
          # Upload vulnerability attestation
          if [ -n "$SBOM_S3_BUCKET" ]; then
            aws s3 cp $VULN_ATTESTATION s3://$SBOM_S3_BUCKET/vulnerability-attestations/
          fi
          
          # Fail build if thresholds exceeded
          if [ "$CRITICAL_COUNT" -gt "${VULNERABILITY_THRESHOLD_CRITICAL:-0}" ]; then
            echo "CRITICAL vulnerabilities ($CRITICAL_COUNT) exceed threshold (${VULNERABILITY_THRESHOLD_CRITICAL:-0})"
            exit 1
          fi
          
          if [ "$HIGH_COUNT" -gt "${VULNERABILITY_THRESHOLD_HIGH:-5}" ]; then
            echo "HIGH vulnerabilities ($HIGH_COUNT) exceed threshold (${VULNERABILITY_THRESHOLD_HIGH:-5})"
            exit 1
          fi
          
          echo "Image passed vulnerability threshold checks"
        else
          echo "Scan did not complete within timeout period"
          exit 1
        fi
      - echo Writing image definitions file...
      - printf '[{"name":"app","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - sbom-reports/**/*
    - build-artifacts.env
  name: BuildArtifacts