{
  "schemaVersion": "2.2",
  "description": "Automated EKS Node Patching with Drain and Cordon",
  "parameters": {
    "ClusterName": {
      "type": "String",
      "description": "Name of the EKS cluster",
      "default": "secure-cluster"
    },
    "DrainTimeout": {
      "type": "String",
      "description": "Timeout for node drain in seconds",
      "default": "300"
    },
    "RebootRequired": {
      "type": "String",
      "description": "Whether to reboot after patching",
      "default": "true",
      "allowedValues": ["true", "false"]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "PrePatchValidation",
      "inputs": {
        "timeoutSeconds": "300",
        "runCommand": [
          "#!/bin/bash",
          "set -e",
          "",
          "echo 'Starting pre-patch validation...'",
          "",
          "# Check if kubectl is available",
          "if ! command -v kubectl &> /dev/null; then",
          "    echo 'kubectl not found, installing...'",
          "    curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl",
          "    chmod +x ./kubectl",
          "    sudo mv ./kubectl /usr/local/bin",
          "fi",
          "",
          "# Get node name",
          "NODE_NAME=$(kubectl get nodes --selector=kubernetes.io/instance-type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type) -o jsonpath='{.items[0].metadata.name}')",
          "echo \"Node name: $NODE_NAME\"",
          "",
          "# Check node status",
          "kubectl get node $NODE_NAME",
          "",
          "# Check running pods",
          "echo 'Pods running on this node:'",
          "kubectl get pods --all-namespaces --field-selector spec.nodeName=$NODE_NAME",
          "",
          "echo 'Pre-patch validation completed'"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "DrainNode",
      "inputs": {
        "timeoutSeconds": "600",
        "runCommand": [
          "#!/bin/bash",
          "set -e",
          "",
          "echo 'Starting node drain process...'",
          "",
          "# Get node name",
          "NODE_NAME=$(kubectl get nodes --selector=kubernetes.io/instance-type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type) -o jsonpath='{.items[0].metadata.name}')",
          "",
          "# Cordon the node",
          "echo \"Cordoning node: $NODE_NAME\"",
          "kubectl cordon $NODE_NAME",
          "",
          "# Drain the node",
          "echo \"Draining node: $NODE_NAME\"",
          "kubectl drain $NODE_NAME \\",
          "    --ignore-daemonsets \\",
          "    --delete-emptydir-data \\",
          "    --force \\",
          "    --timeout={{ DrainTimeout }}s",
          "",
          "echo 'Node drain completed'"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "ApplyPatches",
      "inputs": {
        "timeoutSeconds": "1800",
        "runCommand": [
          "#!/bin/bash",
          "set -e",
          "",
          "echo 'Starting patch application...'",
          "",
          "# Update package lists",
          "yum update -y",
          "",
          "# Apply security updates",
          "yum update -y --security",
          "",
          "# Update EKS-specific packages",
          "yum update -y kubelet kubectl aws-cli",
          "",
          "# Update container runtime",
          "yum update -y docker containerd",
          "",
          "# Update CloudWatch agent if installed",
          "if systemctl is-enabled amazon-cloudwatch-agent &> /dev/null; then",
          "    yum update -y amazon-cloudwatch-agent",
          "fi",
          "",
          "# Update SSM agent",
          "yum update -y amazon-ssm-agent",
          "",
          "# Clean up package cache",
          "yum clean all",
          "",
          "echo 'Patch application completed'"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "PostPatchValidation",
      "inputs": {
        "timeoutSeconds": "300",
        "runCommand": [
          "#!/bin/bash",
          "set -e",
          "",
          "echo 'Starting post-patch validation...'",
          "",
          "# Check if reboot is required",
          "if [[ \"{{ RebootRequired }}\" == \"true\" ]]; then",
          "    if [ -f /var/run/reboot-required ]; then",
          "        echo 'Reboot required, scheduling reboot...'",
          "        # Schedule reboot in 2 minutes to allow SSM to complete",
          "        shutdown -r +2 'System reboot for security patches'",
          "        exit 0",
          "    fi",
          "fi",
          "",
          "# Restart services if no reboot required",
          "echo 'Restarting container services...'",
          "systemctl restart docker",
          "systemctl restart containerd",
          "systemctl restart kubelet",
          "",
          "# Wait for kubelet to be ready",
          "sleep 30",
          "",
          "# Uncordon the node",
          "NODE_NAME=$(kubectl get nodes --selector=kubernetes.io/instance-type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type) -o jsonpath='{.items[0].metadata.name}')",
          "echo \"Uncordoning node: $NODE_NAME\"",
          "kubectl uncordon $NODE_NAME",
          "",
          "# Wait for node to be ready",
          "echo 'Waiting for node to be ready...'",
          "kubectl wait --for=condition=Ready node/$NODE_NAME --timeout=300s",
          "",
          "# Verify node status",
          "kubectl get node $NODE_NAME",
          "",
          "echo 'Post-patch validation completed successfully'"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "SecurityValidation",
      "inputs": {
        "timeoutSeconds": "300",
        "runCommand": [
          "#!/bin/bash",
          "set -e",
          "",
          "echo 'Starting security validation...'",
          "",
          "# Check for available security updates",
          "SECURITY_UPDATES=$(yum --security check-update 2>/dev/null | wc -l)",
          "echo \"Remaining security updates: $SECURITY_UPDATES\"",
          "",
          "# Validate kernel parameters are still applied",
          "echo 'Validating kernel security parameters:'",
          "sysctl net.ipv4.conf.all.send_redirects",
          "sysctl net.ipv4.conf.all.accept_redirects",
          "sysctl kernel.dmesg_restrict",
          "",
          "# Check audit service",
          "systemctl is-active auditd",
          "",
          "# Check fail2ban if installed",
          "if systemctl is-enabled fail2ban &> /dev/null; then",
          "    systemctl is-active fail2ban",
          "fi",
          "",
          "# Validate Docker/containerd security configuration",
          "if [ -f /etc/docker/daemon.json ]; then",
          "    echo 'Docker daemon configuration:'",
          "    cat /etc/docker/daemon.json | jq .",
          "fi",
          "",
          "# Check for running containers with privileged mode",
          "PRIVILEGED_CONTAINERS=$(docker ps --filter 'label=privileged=true' -q | wc -l)",
          "echo \"Privileged containers running: $PRIVILEGED_CONTAINERS\"",
          "",
          "# Generate security report",
          "cat > /tmp/security-report.json << EOF",
          "{",
          "  \"timestamp\": \"$(date -Iseconds)\",",
          "  \"node_name\": \"$(kubectl get nodes --selector=kubernetes.io/instance-type=$(curl -s http://169.254.169.254/latest/meta-data/instance-type) -o jsonpath='{.items[0].metadata.name}')\",",
          "  \"instance_id\": \"$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\",",
          "  \"remaining_security_updates\": $SECURITY_UPDATES,",
          "  \"privileged_containers\": $PRIVILEGED_CONTAINERS,",
          "  \"audit_service\": \"$(systemctl is-active auditd)\",",
          "  \"patch_status\": \"completed\"",
          "}",
          "EOF",
          "",
          "# Send report to CloudWatch (if configured)",
          "if command -v aws &> /dev/null; then",
          "    aws logs put-log-events \\",
          "        --log-group-name \"/aws/eks/{{ ClusterName }}/node/security\" \\",
          "        --log-stream-name \"$(curl -s http://169.254.169.254/latest/meta-data/instance-id)/patch-report\" \\",
          "        --log-events timestamp=$(date +%s000),message=\"$(cat /tmp/security-report.json)\" || true",
          "fi",
          "",
          "echo 'Security validation completed'"
        ]
      }
    }
  ]
}