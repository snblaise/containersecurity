{
  "schemaVersion": "2.2",
  "description": "EKS Node Hardening and Security Configuration",
  "parameters": {
    "ClusterName": {
      "type": "String",
      "description": "Name of the EKS cluster",
      "default": "secure-cluster"
    },
    "NodeRole": {
      "type": "String",
      "description": "Node role (worker, system)",
      "default": "worker",
      "allowedValues": ["worker", "system"]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "SystemHardening",
      "inputs": {
        "timeoutSeconds": "3600",
        "runCommand": [
          "#!/bin/bash",
          "set -e",
          "",
          "echo 'Starting EKS node hardening process...'",
          "",
          "# Update system packages",
          "yum update -y",
          "",
          "# Configure kernel parameters for security",
          "cat >> /etc/sysctl.conf << 'EOF'",
          "# Network security hardening",
          "net.ipv4.conf.all.send_redirects = 0",
          "net.ipv4.conf.default.send_redirects = 0",
          "net.ipv4.conf.all.accept_redirects = 0",
          "net.ipv4.conf.default.accept_redirects = 0",
          "net.ipv4.conf.all.accept_source_route = 0",
          "net.ipv4.conf.default.accept_source_route = 0",
          "net.ipv4.conf.all.log_martians = 1",
          "net.ipv4.conf.default.log_martians = 1",
          "net.ipv4.icmp_echo_ignore_broadcasts = 1",
          "net.ipv4.icmp_ignore_bogus_error_responses = 1",
          "net.ipv4.tcp_syncookies = 1",
          "",
          "# Memory protection",
          "kernel.dmesg_restrict = 1",
          "kernel.kptr_restrict = 2",
          "kernel.yama.ptrace_scope = 1",
          "",
          "# File system security",
          "fs.suid_dumpable = 0",
          "fs.protected_hardlinks = 1",
          "fs.protected_symlinks = 1",
          "EOF",
          "",
          "# Apply kernel parameters",
          "sysctl -p",
          "",
          "# Configure audit logging",
          "cat > /etc/audit/rules.d/eks-security.rules << 'EOF'",
          "# Monitor file system changes",
          "-w /etc/passwd -p wa -k identity",
          "-w /etc/group -p wa -k identity",
          "-w /etc/shadow -p wa -k identity",
          "-w /etc/sudoers -p wa -k identity",
          "",
          "# Monitor network configuration changes",
          "-w /etc/sysconfig/network -p wa -k network",
          "-w /etc/hosts -p wa -k network",
          "",
          "# Monitor Docker and containerd",
          "-w /usr/bin/docker -p x -k docker",
          "-w /usr/bin/containerd -p x -k containerd",
          "-w /var/lib/docker -p wa -k docker",
          "",
          "# Monitor Kubernetes components",
          "-w /var/lib/kubelet -p wa -k kubelet",
          "-w /etc/kubernetes -p wa -k kubernetes",
          "EOF",
          "",
          "# Restart auditd to apply rules",
          "service auditd restart",
          "",
          "# Configure log rotation for container logs",
          "cat > /etc/logrotate.d/docker-containers << 'EOF'",
          "/var/lib/docker/containers/*/*.log {",
          "    rotate 7",
          "    daily",
          "    compress",
          "    size=10M",
          "    missingok",
          "    delaycompress",
          "    copytruncate",
          "}",
          "EOF",
          "",
          "# Set up fail2ban for SSH protection",
          "yum install -y fail2ban",
          "cat > /etc/fail2ban/jail.local << 'EOF'",
          "[DEFAULT]",
          "bantime = 3600",
          "findtime = 600",
          "maxretry = 3",
          "",
          "[sshd]",
          "enabled = true",
          "port = ssh",
          "logpath = /var/log/secure",
          "maxretry = 3",
          "EOF",
          "",
          "systemctl enable fail2ban",
          "systemctl start fail2ban",
          "",
          "# Configure SSH hardening",
          "sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config",
          "sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config",
          "sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config",
          "echo 'Protocol 2' >> /etc/ssh/sshd_config",
          "echo 'MaxAuthTries 3' >> /etc/ssh/sshd_config",
          "echo 'ClientAliveInterval 300' >> /etc/ssh/sshd_config",
          "echo 'ClientAliveCountMax 2' >> /etc/ssh/sshd_config",
          "",
          "# Restart SSH service",
          "systemctl restart sshd",
          "",
          "# Configure Docker daemon security",
          "mkdir -p /etc/docker",
          "cat > /etc/docker/daemon.json << 'EOF'",
          "{",
          "  \"log-driver\": \"json-file\",",
          "  \"log-opts\": {",
          "    \"max-size\": \"10m\",",
          "    \"max-file\": \"3\"",
          "  },",
          "  \"live-restore\": true,",
          "  \"userland-proxy\": false,",
          "  \"no-new-privileges\": true,",
          "  \"seccomp-profile\": \"/etc/docker/seccomp.json\",",
          "  \"storage-driver\": \"overlay2\"",
          "}",
          "EOF",
          "",
          "# Configure containerd security",
          "mkdir -p /etc/containerd",
          "cat > /etc/containerd/config.toml << 'EOF'",
          "version = 2",
          "[plugins.\"io.containerd.grpc.v1.cri\"]",
          "  restrict_oom_score_adj = true",
          "  [plugins.\"io.containerd.grpc.v1.cri\".containerd]",
          "    [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes]",
          "      [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]",
          "        runtime_type = \"io.containerd.runc.v2\"",
          "        [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]",
          "          SystemdCgroup = true",
          "EOF",
          "",
          "# Set file permissions",
          "chmod 600 /etc/docker/daemon.json",
          "chmod 600 /etc/containerd/config.toml",
          "",
          "# Configure IMDSv2 enforcement",
          "TOKEN=$(curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\")",
          "INSTANCE_ID=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/instance-id)",
          "",
          "# Install and configure CloudWatch agent",
          "yum install -y amazon-cloudwatch-agent",
          "cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'",
          "{",
          "  \"agent\": {",
          "    \"metrics_collection_interval\": 60,",
          "    \"run_as_user\": \"cwagent\"",
          "  },",
          "  \"logs\": {",
          "    \"logs_collected\": {",
          "      \"files\": {",
          "        \"collect_list\": [",
          "          {",
          "            \"file_path\": \"/var/log/messages\",",
          "            \"log_group_name\": \"/aws/eks/{{ ClusterName }}/node/system\",",
          "            \"log_stream_name\": \"{instance_id}/messages\"",
          "          },",
          "          {",
          "            \"file_path\": \"/var/log/secure\",",
          "            \"log_group_name\": \"/aws/eks/{{ ClusterName }}/node/security\",",
          "            \"log_stream_name\": \"{instance_id}/secure\"",
          "          },",
          "          {",
          "            \"file_path\": \"/var/log/audit/audit.log\",",
          "            \"log_group_name\": \"/aws/eks/{{ ClusterName }}/node/audit\",",
          "            \"log_stream_name\": \"{instance_id}/audit\"",
          "          }",
          "        ]",
          "      }",
          "    }",
          "  },",
          "  \"metrics\": {",
          "    \"namespace\": \"EKS/Node\",",
          "    \"metrics_collected\": {",
          "      \"cpu\": {",
          "        \"measurement\": [",
          "          \"cpu_usage_idle\",",
          "          \"cpu_usage_iowait\",",
          "          \"cpu_usage_user\",",
          "          \"cpu_usage_system\"",
          "        ],",
          "        \"metrics_collection_interval\": 60",
          "      },",
          "      \"disk\": {",
          "        \"measurement\": [",
          "          \"used_percent\"",
          "        ],",
          "        \"metrics_collection_interval\": 60,",
          "        \"resources\": [",
          "          \"*\"",
          "        ]",
          "      },",
          "      \"mem\": {",
          "        \"measurement\": [",
          "          \"mem_used_percent\"",
          "        ],",
          "        \"metrics_collection_interval\": 60",
          "      }",
          "    }",
          "  }",
          "}",
          "EOF",
          "",
          "# Start CloudWatch agent",
          "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s",
          "",
          "echo 'EKS node hardening completed successfully'",
          "",
          "# Create hardening validation script",
          "cat > /usr/local/bin/validate-hardening.sh << 'EOF'",
          "#!/bin/bash",
          "echo 'Validating EKS node hardening...'",
          "",
          "# Check kernel parameters",
          "echo 'Checking kernel parameters:'",
          "sysctl net.ipv4.conf.all.send_redirects",
          "sysctl net.ipv4.conf.all.accept_redirects",
          "sysctl kernel.dmesg_restrict",
          "",
          "# Check audit rules",
          "echo 'Checking audit rules:'",
          "auditctl -l | head -5",
          "",
          "# Check fail2ban status",
          "echo 'Checking fail2ban status:'",
          "systemctl is-active fail2ban",
          "",
          "# Check CloudWatch agent",
          "echo 'Checking CloudWatch agent:'",
          "systemctl is-active amazon-cloudwatch-agent",
          "",
          "echo 'Hardening validation completed'",
          "EOF",
          "",
          "chmod +x /usr/local/bin/validate-hardening.sh",
          "",
          "# Run validation",
          "/usr/local/bin/validate-hardening.sh"
        ]
      }
    }
  ]
}