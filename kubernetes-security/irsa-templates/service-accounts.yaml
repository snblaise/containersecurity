# IRSA Service Account Templates
# These templates demonstrate proper IRSA configuration for different use cases

---
# Example 1: Basic IRSA service account for S3 access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: s3-access-service-account
  namespace: production
  labels:
    app.kubernetes.io/name: s3-access-sa
    app.kubernetes.io/component: service-account
    security.aws.com/irsa-enabled: "true"
    security.aws.com/aws-service: s3
  annotations:
    # IRSA annotation - replace with your actual IAM role ARN
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/EKS-S3-Access-Role
    # Optional: Specify STS session duration (default is 1 hour)
    eks.amazonaws.com/sts-regional-endpoints: "true"
    # Optional: Audience for the token (default is sts.amazonaws.com)
    eks.amazonaws.com/audience: sts.amazonaws.com
    # Metadata for governance
    security.aws.com/description: "Service account for S3 bucket access"
    security.aws.com/owner: "platform-team@company.com"
    security.aws.com/created-by: "aws-container-security-framework"
automountServiceAccountToken: true

---
# Example 2: IRSA service account for Secrets Manager access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secrets-manager-service-account
  namespace: production
  labels:
    app.kubernetes.io/name: secrets-manager-sa
    app.kubernetes.io/component: service-account
    security.aws.com/irsa-enabled: "true"
    security.aws.com/aws-service: secrets-manager
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/EKS-SecretsManager-Role
    eks.amazonaws.com/sts-regional-endpoints: "true"
    security.aws.com/description: "Service account for AWS Secrets Manager access"
    security.aws.com/owner: "platform-team@company.com"
    security.aws.com/least-privilege: "true"
automountServiceAccountToken: true

---
# Example 3: IRSA service account for CloudWatch logging
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloudwatch-logs-service-account
  namespace: production
  labels:
    app.kubernetes.io/name: cloudwatch-logs-sa
    app.kubernetes.io/component: service-account
    security.aws.com/irsa-enabled: "true"
    security.aws.com/aws-service: cloudwatch
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/EKS-CloudWatch-Logs-Role
    eks.amazonaws.com/sts-regional-endpoints: "true"
    security.aws.com/description: "Service account for CloudWatch Logs access"
    security.aws.com/owner: "platform-team@company.com"
automountServiceAccountToken: true

---
# Example 4: IRSA service account for RDS access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rds-access-service-account
  namespace: production
  labels:
    app.kubernetes.io/name: rds-access-sa
    app.kubernetes.io/component: service-account
    security.aws.com/irsa-enabled: "true"
    security.aws.com/aws-service: rds
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/EKS-RDS-Access-Role
    eks.amazonaws.com/sts-regional-endpoints: "true"
    security.aws.com/description: "Service account for RDS database access"
    security.aws.com/owner: "database-team@company.com"
    security.aws.com/database-access: "read-write"
automountServiceAccountToken: true

---
# Example 5: IRSA service account for ECR access (for image pulling)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ecr-access-service-account
  namespace: production
  labels:
    app.kubernetes.io/name: ecr-access-sa
    app.kubernetes.io/component: service-account
    security.aws.com/irsa-enabled: "true"
    security.aws.com/aws-service: ecr
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/EKS-ECR-Access-Role
    eks.amazonaws.com/sts-regional-endpoints: "true"
    security.aws.com/description: "Service account for ECR image access"
    security.aws.com/owner: "platform-team@company.com"
    security.aws.com/access-type: "read-only"
automountServiceAccountToken: true

---
# Example 6: Multi-service IRSA service account (use sparingly)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multi-service-account
  namespace: production
  labels:
    app.kubernetes.io/name: multi-service-sa
    app.kubernetes.io/component: service-account
    security.aws.com/irsa-enabled: "true"
    security.aws.com/aws-service: multiple
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/EKS-Multi-Service-Role
    eks.amazonaws.com/sts-regional-endpoints: "true"
    security.aws.com/description: "Service account with access to multiple AWS services"
    security.aws.com/owner: "platform-team@company.com"
    security.aws.com/services: "s3,secrets-manager,cloudwatch"
    security.aws.com/warning: "Multi-service access - review regularly"
automountServiceAccountToken: true

---
# Example 7: Development environment service account (less restrictive)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dev-service-account
  namespace: development
  labels:
    app.kubernetes.io/name: dev-sa
    app.kubernetes.io/component: service-account
    security.aws.com/irsa-enabled: "true"
    security.aws.com/environment: development
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/EKS-Development-Role
    eks.amazonaws.com/sts-regional-endpoints: "true"
    security.aws.com/description: "Development environment service account"
    security.aws.com/owner: "development-team@company.com"
    security.aws.com/environment: "development-only"
automountServiceAccountToken: true