#!/bin/bash

# Script to create KMS keys for envelope encryption of secrets
# This script creates customer-managed KMS keys for different secret categories

set -euo pipefail

# Configuration
AWS_REGION="${AWS_REGION:-us-east-1}"
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
KEY_POLICY_FILE="kms-key-policy.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to create KMS key with policy
create_kms_key() {
    local key_description="$1"
    local key_alias="$2"
    
    log_info "Creating KMS key: $key_description"
    
    # Replace placeholders in policy file
    local temp_policy=$(mktemp)
    sed "s/ACCOUNT_ID/$ACCOUNT_ID/g; s/REGION/$AWS_REGION/g" "$KEY_POLICY_FILE" > "$temp_policy"
    
    # Create the KMS key
    local key_id=$(aws kms create-key \
        --region "$AWS_REGION" \
        --description "$key_description" \
        --key-usage ENCRYPT_DECRYPT \
        --key-spec SYMMETRIC_DEFAULT \
        --policy file://"$temp_policy" \
        --query 'KeyMetadata.KeyId' \
        --output text)
    
    if [ $? -eq 0 ]; then
        log_info "Created KMS key: $key_id"
        
        # Create alias for the key
        aws kms create-alias \
            --region "$AWS_REGION" \
            --alias-name "alias/$key_alias" \
            --target-key-id "$key_id"
        
        if [ $? -eq 0 ]; then
            log_info "Created alias: alias/$key_alias"
            echo "$key_id"
        else
            log_error "Failed to create alias for key: $key_id"
            return 1
        fi
    else
        log_error "Failed to create KMS key: $key_description"
        return 1
    fi
    
    # Clean up temporary file
    rm -f "$temp_policy"
}

# Function to enable key rotation
enable_key_rotation() {
    local key_id="$1"
    
    log_info "Enabling automatic key rotation for: $key_id"
    
    aws kms enable-key-rotation \
        --region "$AWS_REGION" \
        --key-id "$key_id"
    
    if [ $? -eq 0 ]; then
        log_info "Enabled automatic key rotation"
    else
        log_warn "Failed to enable automatic key rotation"
    fi
}

# Main execution
main() {
    log_info "Starting KMS key creation for secrets management"
    log_info "AWS Region: $AWS_REGION"
    log_info "Account ID: $ACCOUNT_ID"
    
    # Check if policy file exists
    if [ ! -f "$KEY_POLICY_FILE" ]; then
        log_error "KMS key policy file not found: $KEY_POLICY_FILE"
        exit 1
    fi
    
    # Create KMS keys for different secret categories
    declare -A keys=(
        ["EKS Secrets Manager - Database Secrets"]="eks-secrets-database"
        ["EKS Secrets Manager - Application Secrets"]="eks-secrets-application"
        ["EKS Secrets Manager - API Secrets"]="eks-secrets-api"
        ["EKS Secrets Manager - Monitoring Secrets"]="eks-secrets-monitoring"
        ["EKS Secrets Manager - TLS Certificates"]="eks-secrets-tls"
    )
    
    # Store created key IDs
    declare -A created_keys
    
    for description in "${!keys[@]}"; do
        alias="${keys[$description]}"
        
        # Check if alias already exists
        if aws kms describe-key --region "$AWS_REGION" --key-id "alias/$alias" >/dev/null 2>&1; then
            log_warn "KMS key alias already exists: alias/$alias"
            key_id=$(aws kms describe-key --region "$AWS_REGION" --key-id "alias/$alias" --query 'KeyMetadata.KeyId' --output text)
            created_keys["$alias"]="$key_id"
        else
            key_id=$(create_kms_key "$description" "$alias")
            if [ $? -eq 0 ]; then
                created_keys["$alias"]="$key_id"
                enable_key_rotation "$key_id"
            fi
        fi
    done
    
    # Output summary
    log_info "KMS Key Creation Summary:"
    echo "=========================="
    for alias in "${!created_keys[@]}"; do
        key_id="${created_keys[$alias]}"
        echo "Alias: alias/$alias"
        echo "Key ID: $key_id"
        echo "ARN: arn:aws:kms:$AWS_REGION:$ACCOUNT_ID:key/$key_id"
        echo ""
    done
    
    # Create Terraform variables file
    log_info "Creating Terraform variables file..."
    cat > kms-keys.tfvars << EOF
# KMS Keys for EKS Secrets Management
# Generated by create-kms-keys.sh

kms_keys = {
EOF
    
    for alias in "${!created_keys[@]}"; do
        key_id="${created_keys[$alias]}"
        cat >> kms-keys.tfvars << EOF
  "$alias" = {
    key_id = "$key_id"
    arn    = "arn:aws:kms:$AWS_REGION:$ACCOUNT_ID:key/$key_id"
    alias  = "alias/$alias"
  }
EOF
    done
    
    echo "}" >> kms-keys.tfvars
    
    log_info "KMS keys created successfully!"
    log_info "Terraform variables saved to: kms-keys.tfvars"
}

# Run main function
main "$@"